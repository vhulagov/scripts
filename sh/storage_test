#!/bin/sh -e
# VERSION: 0.3

g-unpack-cpio t:mem
g-unpack-cpio t:hdd

export PATH="$PATH:/usr/local/bin"

SAVED_TRAPS="$(trap)"

storage_test_sigstop()
{
	rc="$?"
	set +x
	set +e

	[ -z "$ipid" ] || kill -9 "$ipid" >/dev/null 2>&1 ||:
	[ -z "$tpid" ] || kill -9 "$tpid" >/dev/null 2>&1 ||:
	[ -z "$fpid" ] || kill -9 "$fpid" >/dev/null 2>&1 ||:

	killall inotifywait >/dev/null 2>&1 ||: 
	killall fio >/dev/null 2>&1 ||: 
	killall badblocks >/dev/null 2>&1 ||: 
	
	rm -rf $fpid_file $ipid_file $tpid_file ||:

	eval "$SAVED_TRAPS"

	[ "$rc" = "0" ] || false
}

trap storage_test_sigstop USR1 KILL TERM EXIT QUIT INT 

usage()
{
cat - >&2 <<EOF
-f|--functional-test; Select test type: bad-bloks for search all devices for bad blocks; fio for check I/O problems on HBA/DAS.
-D|--device-list FIO parameter; Set types of configurations in which disk system will be configured; May be disk; raid0; raid6, etc. When disk storage consist of more than 24 HDD, disks groups by 20 HDD per raid.
-M|--method-list  FIO parameter; Set type(method) of disks operations, there are: random, sequential
-m|--mode-list   FIO parameter; Set mode of work with storage, there are: read, write, readwrite
-d|--io-depth   FIO parameter; Depth of I/O operations;
-t|--test-opt_test_duration   FIO parameter; Duration of the test in seconds;
-n|--disks-num   Right number of disks in storage;
-h|--max-hdd-temp  Set the value of maximum temperature of disks trigger;
-l|--max-latency  Set the value of maximum latency in disks operations, microseconds;
-I|--min-iops  Set the value of minimum IOPS in disks operations, trigger;
-b|--min-bandwidth  Set the value of minimum bandwidth in disks operations, KB/s;
-a|--all-disks !!!DANGEROUS!!! Run
EOF
  exit 1
}


API_URL="http://ya-hw-cert.yandex-team.ru/cgi-bin/storage_testormance.pl"
logfile=/var/log/storage-test.$$
tmp_dir=/tmp/storage-test.$$
bad_block_list=$tmp_dir/bad-block-list
bad_smart_list=$tmp_dir/bad-smart-list
ipid_file=/var/run/inotifywait.pid
fpid_file=/var/run/storage-test.pid
tpid_file=/var/run/temp-hdd-check.pid
srv_id=$(cat /tmp/srv_id 2>/dev/null ||:)

TEMP=`getopt -o f:D:h:M:m:d:t:n:l:I:b:aF --long apply-tyst:,device-list:,max-hdd-temp:,method-list:,mode-list:,io-depth:,test-opt_test_duration:,disks-num:,max-latency:,min-iops:,min-bandwidth:,all-disks,flush-storage -n "t:storage" -- "$@" || i-fail "t:storage: Wrong parameters"`

eval set -- "$TEMP"

bad_blocks_check=1
device_list=disk
all_disks_flag=1

# Defait FIO configuration
block_size=8k
buffered=0
direct=1
io_engine=libaio

io_seq_depth=1
io_ran_depth=16
opt_test_duration=1800

# Critical SMART parameters
max_pend=10    # Maximum Pending sectors
max_offunc=10  # Maximum Offline UNC errors
max_revent=10  # Maximim Realloceted events
max_rsect=3    # Maximim Reallocated sectors (Bad blocks)
max_read_err=1 # Maximum Rear Raw errors (for WD and Hitachi only)

max_hdd_temp=55
warn_hdd_temp=50

ref_stor_disks_num=15

# Critical FIO parameters
ref_iops=500
ref_latency=100000
ref_bandwidth=5000


while :; do
    case "$1" in
		-f|--apply-test) shift
				case "$1" in
				fio|badblocks) ;;
				*) i-fail "t:storage: unknown test: $1" ;;
				esac
				opt_tests="${opt_tests:+$opt_tests,}$1"
				;;
		-D|--device-list) shift
				device_list=$1
				;;
		-h|--max-hdd-temp) shift
				max_hdd_temp=$1
				;;
		-M|--method-list) shift
				method_list=$1
				;;
		-m|--mode-list) shift
				mode_list=$1
				;;
		-d|--io-depth) shift
				io_seq_depth=$1
				io_ran_depth=$1
				;;
		-t|--test-opt_test_duration) shift
				opt_test_duration=$1
				;;
		-n|--disks-num) shift
				ref_stor_disks_num=$1
				;;
		-l|--max-latency) shift
				ref_latency=$1
				;;
		-I|--min-iops) shift
				ref_iops=$1
				;;
		-b|--min-bandwidth) shift
				ref_bandwidth=$1
				;;
		-a|--all-disks)
				all_disks_flag=1
				;;
		-F|--flush-storage)
				flush_storage_conf_flag=1
				;;
    --) shift
        break
        ;;
		*) i-fail "t:storage: Unimplemented option chosen: $1"
        ;;
		esac
		shift
done

[ -n "$opt_tests" ] || opt_tests=fio
opt_tests="$(echo $opt_tests | tr ',' ' ')"

mkdir -p $tmp_dir

stor_disks=$(lsscsi -tg | grep sas | sed -n 's,.*\(/dev/sd[a-z]*\) .*,\1,p')
[ -n "$stor_disks" ] && stor_disks_num=$(printf "$stor_disks\n" | wc -l)
sys_disks=$(lsscsi | grep -vE 'sas|AMI|cd' | sed -n 's,.*\(/dev/sd[a-z]\).*,\1,p')
[ -n "$sys_disks" ] && sys_disks_num=$(printf "$sys_disks\n" | wc -l)

[ ! -n "$stor_disks" -a ! -n "$sys_disks" ] && i-log log "t:storage: WARNING! No disks found at all"

[ -n "$all_disks_flag" ] && test_disk_list="$(printf "$sys_disks\n$stor_disks")" || test_disk_list="$stor_disks"
[ -n "$all_disks_flag" ] && test_disk_list_num="$(($stor_disks_num+$sys_disks_num))" || test_disk_list_num="$stor_disks_num"

expanders=$(sg_map -x | awk '{if ( $6 == 13 ) { print $1 }}'| tr '\n' ' ')
[ -n "$expanders" ] || i-log log "t:storage: Disks expander(s) not found"
#[ -n "$expander" ] || { i-log log "t:storage: Disks expander not found"; \
#		 test_disk_list="$sys_disks"; test_disk_list_num=$sys_disks_num; }

flush_storage_configuration()
{
	mdadm -S `ls /dev/md* 2>/dev/null` 2>/dev/null || :
	for D in "$test_disk_list"; do  
		mdadm --zero-superblock $D 2>/dev/null || :
	done
}

light_down_slots()
{
for e in $expanders; do
	for i in `seq 1 $(sg_ses -p 0xA $e | grep 'Element index' | wc -l)`; do  
				sg_ses --index="$i" --set=2:1=0 "$e" 2>/dev/null ||:
				sg_ses --index="$i" --set=3:5=0 "$e" 2>/dev/null ||:
	done
done
}

get_slot()
{
for e in $expanders; do
  sas_addr=$(lsscsi -tg | grep -w $1 | sed -n 's/.*sas:\(0x[0-9a-f]*\) .*/\1/p')
  slot=$(sg_ses -p 0xA $e | grep "$sas_addr" -B 8 | sed -n 's/.*Element index: \([0-9]\)/\1/p')
  if [ -n "$slot" ]; then 
		printf "slot=$slot; expander=$e"
    break
  fi  
done
}

light_up_slot()
{
case "$1" in
	failed) sg_str='3:5' ;;
	passed) sg_str='2:1' ;;
esac

eval `get_slot $2`
sg_ses --index="$slot" --set=$sg_str=1 "$expander" ||: 
}

[ -n "$flush_storage_conf_flag" ] && flush_storage_configuration

light_down_slots

check_drive_type()
{
	if [ "$(cat /sys/block/$1/queue/rotational 2>/dev/null||:)" -eq 1 ]; then
		printf "drive_type=sata-hdd"
	else
		printf "drive_type=ssd"
	fi
}


check_smart()
{
	for d in $test_disk_list; do
		eval `check_drive_type ${d#/dev/}`
		case $drive_type in 
			sata-hdd)			
			eval `timeout 10 smartctl -A -H -i -a $d | fgrep -v '===' | sed '/Warning/d' | awk '
			/Device Model/{ model=$3$4 }
			/Power_On_Hours/{ poh=$10 }
			/Serial [Nn]umber:/ { drive_ser_num=$3 }
			/Raw_Read_Error_Rate/{ read_error=$10}
			/Reported_Uncorrect/ { runc=$10 }
			/Current_Pending_Sector/ { pend=$10 }
			/Offline_Uncorrectable/ { offunc=$10 }
			/Reallocated_Sector_Ct/ { rsec=$10 }
			/Reallocated_Event_Count/ { revent=$10 }
			/SMART overall-health/ { health=$6 }
			/ATA Error/{ ata_err=$4 }
			END {
				print  "drive_ser_num=" drive_ser_num "; model=" model ";  poh=" poh "; runc=" runc "; pend=" pend "; offunc=" offunc ";" 
				print "read_error=" read_error "; ata_err=" ata_err "; rsec=" rsec "; revent=" revent "; health=\"" health "\";"
			}' | sed 's/,//g' 2>/dev/null`

			wd=$(printf "$model" | grep WDC ||:) 
			hitachi=$(printf "$model" | grep -i Hitachi ||:)

			#data=$(echo "MODEL="$model"&SERIAL_NUM="$drive_ser_num"&POH="$poh"&READ_ERROR_RATE="$read_error"&CURRENT_PEND=""$pend""&REALLOC=""$rsec""&OFFLINE_UNC=""$offunc""&REALL_EVENT=""$revent""&HEALTH="$health"&ATA_ERROR="$ata_err)
			what=''

				[ ${rsec:-0} -gt $max_rsect ] && what="Reallocated_Sector_Ct: $rsec"
				[ ${pend:-0} -gt $max_pend ] && what="Current_Pending_Sector: $pend"
				[ ${offunc:-0} -gt $max_offunc ] && what="Offline_Uncorrectable: $rsec"
				[ ${revent:-0} -gt $max_revent ] && what="Reallocated_Event_Count: $revent"
				[ ${health:-0} != "PASSED" ] && what="overall-health: $health"
				[ -n "$ata_err" ] && what="ATA Error: $ata_err"
				if [ -z $model -a -z $drive_ser_num ]; then
					if [ -n "$wd" -a ${read_error:-0} -gt $max_read_err ] || 2>&1\
						[ -n "$hitachi" -a ${read_error:-0} -gt $max_read_err ]; then
							#[ -n "$send_results" ] && curl -v -g -d "STAGE=1&RESULT=FAILED&REASON=SMART_FAILED&$data" "$api_url"
							what="Raw_Read_Error_Rate > 1 on $model: $read_error"
					fi
				fi
				[ -n "$what" ] && { i-log log "t:storage: $d(S/N:$drive_ser_num) - bad SMART, $what" 2>&1 | tee -a $bad_smart_list; light_up_slot failed $d || rc=$?; }
			;;
			ssd) ;;
			sas) ;;
		esac
		smart_warning_messages=$(timeout 10 smartctl -A -H -i -a $d | grep Warning)
		[ -n "$smart_warning_messages" ] && echo "t:storage: $(timeout 10 smartctl -A -H -i -a $d | grep Warning)" 
	done

	[ ! -s "$bad_smart_list" ] || { i-log log "t:storage: $(cat $bad_smart_list | cut -d ' ' -f 3- | tr '\n' ';')"; return 1; }
}


check_log()
{
	inotifywait -q -m -e modify /var/log/messages | while read foo; do
		if grep -E -q "(mpt2sas.*removing handle.*|mpt2sas.*log_info\(0x[0-9A-F]*\)|end_request: I/O error, dev sd)" /var/log/messages; then
			disk_err="$(cat /var/log/messages | cut -d ']' -f2- | sort -u | sed -n 's/.*end_request: I\/O error, dev \(sd[a-z]*\),.*/\1/p')"
			[ -n "$expanders" ] && phy_err="$(cat /var/log/messages | cut -d ']' -f2- | sort -u | sed -n 's,.*mpt2sas.*log_info(\(0x[0-9A-F]*\)).*code(\(0x[0-9A-F]*\)).*sub_code(\(0x[0-9A-F]*\)).*,\1\,\2\,\3\n,p')"
			[ -n "$expanders" ] && disk_missing_err="$(cat /var/log/messages | cut -d ']' -f2- | sort -u | sed -n 's,.*mpt2sas.*removing handle.*sas_addr(\(0x[0-9A-F]*\)).*,\1,p')"
			[ -n "$disk_missing_err" ] && disk_missing=$(check_empty_slots | grep -v "$empty_slots")
			[ -n "$disk_missing" ] && i-log log "t:storage: Disk fires back during test in slot: $disk_missing" 2>&1 | tee -a $logfile
			[ -n "$disk_err" -a -z "$phy_err" ] && i-log log "t-storage: I/O errors on $disk_err" 2>&1 | tee -a $logfile
			[ -n "$disk_err" -a -n "$phy_err" ] &&  i-log log "t-storage: Errors on physical layer of $disk_err; log_info,code,sub_code: $phy_err" 2>&1 | tee -a $logfile
		else
			continue
		fi
	done
}

check_empty_slots()
{
	if [ -n "$expanders" ]; then 
		for e in $expanders; do
#TODO Prepare parameters and values to better usage in check_storage_disks_num
			empty_slots="$(sg_ses -p 0xA $e | grep 0x0000000000000000 -B 8 | sed -n 's/.*Element index: \([0-9]\)/\1/p')"
			#empty_slots="$(sg_ses -p 0xA $expander | grep 0x0000000000000000 -B 8 | awk '/Element index/{print $3}'|tr '\012' ', ' )"; 
		done
		printf "$empty_slots\n"
	fi
}

check_storage_disks_num()
{
	[ "$stor_disks_num" -eq "$ref_stor_disks_num" ] || { 
		i-log log "t:storage: Number of disks in storage is $stor_disks_num, that is less than $ref_stor_disks_num. Empty slots: $(check_empty_slots)" 2>&1 | tee -a $logfile; }
}

send_results()
{
	RESULTS="&IOPS_"$DEVICE"_"$METHOD"_"$MODE"="$IOPS"&latency_"$DEVICE"_"$METHOD"_"$MODE"="$LATENCY"&bandwidth_"$DEVICE"_"$METHOD"_"$MODE"="$BANDWIDTH
	curl "$API_URL?srv_id=$srv_id$RESULTS" || i-log log "Can't send current state to ya-hw-test!"
}

run_fio()
{
	for DEVICE in $device_list; do
		for METHOD in $method_list; do
			for MODE in $mode_list; do
				MODE_NAME=$METHOD""$MODE
				[ "$METHOD" = "rand" ] && IO_DEPTH=$io_ran_depth || { IO_DEPTH=$io_seq_depth; MODE_NAME=$MODE; }

				conf_file=$tmp_dir/$METHOD"_"$MODE"_"$DEVICE.conf
				log_file=$tmp_dir/$METHOD"_"$MODE"_"$DEVICE.log

				FILENAMES=''
				if [ -n "$(printf "$DEVICE" | sed -n '/^raid/p')" ]; then
					RAID_DEV=/dev/md0
					RAID_LEVEL="$(printf $DEVICE | sed -n 's/^[a-z]*\([0-9]*\)/\1/p')"

					if [ "$stor_disks_num" -gt 24 ]; then
					DISKS_FROM=1
					[ -n "RAID_DEV_NUM" ] || RAID_DEV_NUM=20
					RAID_DEVS=''
						for G in `seq $(($stor_disks_num/$RAID_DEV_NUM))`; do
							RAID_DEV="/dev/md$(($G-1))"
							DISKS_TO=$(($G*$RAID_DEV_NUM+1))
							DISKS_PART=$(lsscsi -tg | grep sas | sed -n '$DISKS_FROM,$DISKS_TO{s,.*\(/dev/sd[a-z]*\),\1,p}' | tr '\012' ' ')
							DISKS_FROM=$(($DISKS_TO+1));
							mdadm --create $RAID_DEV --level=$RAID_LEVEL --raid-devices=$RAID_DEV_NUM "$DISKS_PART"
							RAID_DEVS="$([ -n "$RAID_DEVS" ] && printf "$RAID_DEVS ")$RAID_DEV"
							FILENAMES=$(printf "$FILENAMES\nfilename=$RAID_DEV")
						done
						mdadm -W $RAID_DEVS
					else
						RAID_DEVS=$RAID_DEV
						mdadm --create $RAID_DEVS --level=$RAID_LEVEL --raid-devices=$stor_disks_num $DISKS
						mdadm -W $RAID_DEVS
					fi
					FILENAMES="filename=$RAID_DEV"
				else 
					for D in $test_disk_list; do 
						FILENAMES=$(printf "$FILENAMES\nfilename=$D")
					done
				fi

		if [ -n "$MEGA_RAID" ]; then
			sudo ./MegaCli64 -CfgClr -aAll
			sudo ./MegaCli64 -CfgSpanAdd r10 Array0[116:49,116:50] Array1[116:51,116:52] Array2[116:53,116:54] Array3[116:55,116:56] Array4[116:57,116:58] Array5[116:59,116:60] -a0
			sudo ./MegaCli64 -LDInit -Start full -l0 -a0
		fi
			

				cat > "$conf_file" <<EOF
[$MODE/test]
$FILENAMES
rw=$MODE_NAME
direct=$direct
buffered=$buffered
ioengine=$io_engine
iodepth=$IO_DEPTH
runtime=$opt_test_duration
EOF
				
				i-log log "t:storage: Starting fio test..."

				fio $conf_file  > $log_file || { rc=$?; i-fail "t:storage: Failed to start fio"; }

				check_fio_results || rc=$?

				#[ -n "$VALIDATION" ] && { RESULTS=''; send_results; }

			done
		done

		[ -n "$expanders" ] && check_storage_disks_num
		[ -n "$non_first_cycle" ] && flush_storage_configuration

		non_first_cycle=1

	done

	kill -9 $(cat $ipid_file) $(cat $tpid_file) >/dev/null 2>&1 ||:
	return $rc
}

check_fio_results()
{
	IOPS=$(cat $log_file | sed -n 's/.*iops=\([0-9]*\).*/\1/p' | sort -r | tail -1)
	LATENCY_RAW=$(cat $log_file | sed -n 's/.*clat (\([a-z]*\)).*avg=\([0-9]*.[0-9]*\),.*/\2\1/p' | sort -r | head -1)
	latency_unit="$(printf "$LATENCY_RAW" | sed -ne 's/[0-9]*.[0-9]*\([umsec]*\)/\1/p')"
  latency_value="$(printf "$LATENCY_RAW" | sed -ne 's/\([0-9]*\).[0-9]*[umsec]*/\1/p')"
		case "$latency_unit" in
				usec) LATENCY="$latency_value" ;;
				msec) LATENCY="$((latency_value * 60))" ;;
				sec) LATENCY="$((latency_value * 3600))" ;;
		esac

	BANDWIDTH=$(cat $log_file | sed -n 's/.*bw=\([0-9]*\).*/\1/p' | sort -r | tail -1)
	
	i-log log "$conf_file: IOPS=$IOPS, latency=$latency_value$latency_unit, bandwidth=$BANDWIDTH KB/s"

	[ "$IOPS" -lt "$ref_iops" ] && { rc=2; i-log log "t:storage: Low IOPS on disk operations: $IOPS!" 2>&1 | tee -a $logfile; }
	[ "$LATENCY" -gt "$ref_latency" ] && { rc=3; i-log log "t:storage: Latency is to high: $LATENCY!" 2>&1 | tee -a $logfile; }
	[ "$BANDWIDTH" -lt "$ref_bandwidth" ] && { rc=4; i-log log "t:storage: The I/O bandwidth is to low: $BANDWIDTH!" 2>&1 | tee -a $logfile; }
	return $rc
}

run_badblocks()
{
	timeout -k 5 $opt_test_duration badblocks -wv -b 512 -e 3 -s -t 0xff -o $(printf "$bad_block_list"."$$") $d 2>&1 || rc=$?
	bpid=$!
	printf "$bpid " >> $fpid_file
	wait $bpid || rc=$?
		# RC: 127 for timeout and 1? for pass
		if [ "$rc" -ne 0 -a "$rc" -ne 127 ]; then
				i-log log "badblocks ended with RC: $rc"
				light_up_slot failed $d
		fi  
#	[ -n "$send_results" ] && curl -v -g -d "STAGE=2&RESULT=FAILED&REASON=BBLOCK_FAILED&$data" "$api_url"
#	[ -n "$send_results" ] && curl -v -d "RESULT=VALID&$data" "$SERVER"

	return 0
}

run_badblocks_check()
{
	rc=0
	for d in $test_disk_list; do
		run_badblocks &
	done

	sleep $((opt_test_duration+5))
	[ ! -n "$(cat $bad_block_list''* ||:)" ] || i-log log "t:storage: disks has bad blocks: $(cat $bad_block_list''* ||:)" | tee -a $logfile

	kill -9 $(cat $ipid_file) $(cat $tpid_file) >/dev/null 2>&1 ||:
	return $rc 
}

hdd_temp_measurement()
{
	cur_hdd_temp=$(smartctl -a $1 | grep Temperature_Celsius | awk '{print $10}');
	[ "$cur_hdd_temp" -ge "$warn_hdd_temp" ] && i-log log "$1(S/N:$(smartctl -a $1 | sed -ne 's/^Serial Number: *\(.*\)/\1/p'), $(get_slot) ) temperature is high: $cur_hdd_temp°C"
	[ "$cur_hdd_temp" -ge "$max_hdd_temp" ] && \
	{ kill -9  $(cat $ipid_file) $(cat $fpid_file) >/dev/null 2>&1 || rc=$?; i-status 1 "$1(S/N:$(smartctl -a $1 | sed -ne 's/^Serial Number: *\(.*\)/\1/p'), $(get_slot) ) temperature is CRITICAL: $cur_hdd_temp°C"; exit $rc; }
}

hdd_temp_check()
{
	while :; do
		for dev_disk in $test_disk_list; do
			hdd_temp_measurement $dev_disk &
			printf "$([ -s "$tpid_file" ] && printf " ")$?" >> tpid_file 
		done
		sleep 5
	done
}

[ -n "$expanders" ] && check_storage_disks_num

check_log &
ipid=$!
printf "$ipid" > $ipid_file

#hdd_temp_check &
#tpid=$!
#printf "$tpid" > $tpid_file

for test in $opt_tests; do
	rc=0
	echo $test > /var/run/current-load
	i-log log "t:storage: $test test started"
	case $test in
		fio)
			run_fio &
			fpid=$!
			printf $fpid > $fpid_file
		;;
		badblocks)
			run_badblocks_check &
			fpid=$!
			printf $fpid > $fpid_file
		;;
	esac

done

wait "$ipid" "$fpid" ||:

check_smart ||:

#cutout="| cut -d ' ' -f 3- | tr '\\n' ';' >/dev/null 2>&1 ||:"
#[ ! -s "$logfile" -a ! -s "$bad_block_list" -a ! -s "$bad_smart_list" ] || \
#	i-status 1 "Storage test failed: $(cat $logfile $cutout ; \
#		cat $bad_block_list $cutout ; \
#		cat $bad_smart_list $cutout)"

[ ! -s "$logfile" -a ! -s "$bad_block_list" -a ! -s "$bad_smart_list" ] || \
	i-status 1 "Storage test failed: $(cat $logfile | cut -d ' ' -f 3- | tr '\n' '; ' 2>/dev/null ||: ;\
		cat $bad_block_list | cut -d ' ' -f 3- | tr '\n' '; ' 2>/dev/null ||: ;\
		cat $bad_smart_list | cut -d ' ' -f 3- | tr '\n' '; ' 2>/dev/null ||: )"

i-complete #"t:storage: Check successfully completed"
