#!/bin/sh -e
VERSION=0.8v

[ -n "$SERVER" -a -n "$MAC" ]

cd /
cat t:mem | lzma -c -d | cpio -iumd
cat t:hdd | lzma -c -d | cpio -iumd
cat fw:hdd | lzma -c -d | cpio -iumd

SAVED_TRAPS="$(trap)"

storage_test_sigstop()
{
  rc="$?"
  set +x
  set +e

  [ -z "$ipid" ] || kill -9 "$ipid" >/dev/null 2>&1 ||:
  [ -z "$tpid" ] || kill -9 "$tpid" >/dev/null 2>&1 ||:
  [ -z "$fpid" ] || kill -9 "$fpid" >/dev/null 2>&1 ||:
  [ ! -s "$jpid_file" ] || kill -9 $(cat "$jpid_file") >/dev/null 2>&1 ||:

  killall tail >/dev/null 2>&1 ||: 
  killall fio >/dev/null 2>&1 ||: 
  killall badblocks >/dev/null 2>&1 ||: 
  killall shred >/dev/null 2>&1 ||: 
  
  rm -rf "$fpid_file" "$ipid_file" "$tpid_file" "$jpid_file" 2>/dev/null ||:

  eval "$SAVED_TRAPS"
}

trap storage_test_sigstop USR1 KILL TERM EXIT QUIT INT 

usage()
{
cat - >&2 <<EOF
-a|--functional-test; Select test type: badblocks for search all devices for bad blocks; fio for check I/O problems on HBA/DAS and shred to secure erase all data on drives.
-D|--device-list FIO parameter; Set types of configurations in which storage subsystem will be configured; May be single; raid0; raid6, etc. When storage consist of more than 24 drives, drives groups by 20 HDD per raid.
-M|--method-list  FIO parameter; Set type(method) of drives operations, there are: random, sequential
-m|--mode-list   FIO parameter; Set mode of work with storage, there are: read, write, readwrite
-d|--io-depth   FIO parameter; Depth of I/O operations;
-t|--overal-test-duration  Duration of the whole test in seconds;
-T|--session-test-duration   FIO parameter; Duration of the test in seconds;
-n|--drives-num   Right number of drives in storage;
-h|--max-hdd-temp  Set the value of maximum temperature of drives trigger;
-l|--max-latency  Set the value of maximum latency in drives operations, microseconds;
-I|--min-iops  Set the value of minimum IOPS in drives operations, trigger;
-b|--min-bandwidth  Set the value of minimum bandwidth in drives operations, KB/s;
-A|--all-drives !!!DANGEROUS!!! Run test on all drives (include system);
-Z|--zero-superblock !!!DANGEROUS!!! Erease storage configuration.
-U|--create-udev-rules !!!DANGEROUS!!! Create udev rules to affect current functional load to new drives.
EOF
  exit 1
}

echo "log: VERSION $VERSION"

API_URL="****storage_testormance.pl"
logfile="/var/log/log.$$"
tmp_dir="/tmp/log.$$"
bad_drives_list="/tmp/bad-drives-list"
sas_error_codes="/tmp/sas-error-codes"
ipid_file="/var/run/tail.pid"
jpid_file="/var/run/fio-jobs.pid"
fpid_file="/var/run/storage-test.pid"
tpid_file="/var/run/temp-hdd-check.pid"

TEMP=$(getopt -o a:D:h:M:m:d:t:n:l:I:b:AFT:U --long apply-test:,device-list:,max-hdd-temp:,method-list:,mode-list:,io-depth:,overal-test-duration:,drives-num:,max-latency:,min-iops:,min-bandwidth:,all-drives,zero-superblock,session-test-duration,create-udev-rules -n "log" -- "$@" || i-fail "log: Wrong parameters")

eval set -- "$TEMP"

device_list=single
method_list=seq
mode_list='read'

# Num of similtuosly drives tests
dev_group_dim_seq=6
dev_group_dim_rand=10

stor_test_time=120
sys_test_time=300

# Defait FIO configuration
block_size=128k
buffered=0
direct=1
io_engine=libaio

io_seq_depth=32
io_ran_depth=16
test_duration=360

# Critical preformance constants
max_hdd_temp=55
warn_hdd_temp=50

# Critical FIO parameters
# for single drive
ref_stor_drives_num=15

#ref_iops_rand_single=600
#ref_latency_rand_read_single=50000
#ref_latency_rand_write_single=50000
#ref_bandwidth_seq_single=50000000

# for system drives only
#ref_iops_rand_single=50 # Was before ver. 0.8e
ref_iops_sys=600
ref_latency_read_sys=50000
ref_latency_write_sys=50000
ref_bandwidth_sys=50000000

# for summary
#ref_iops_rand_single=50 # Was before ver. 0.8e
ref_iops_all=600
ref_latency_read_all=50000
ref_latency_write_all=50000
ref_bandwidth_all=50000000


while :; do
    case "$1" in
    -a|--apply-test) shift
        case "$1" in
        fio|badblocks|shred) ;;
        *) i-fail "log: unknown test: $1" ;;
        esac
        opt_tests="${opt_tests:+$opt_tests,}$1"
        ;;
    -D|--device-list) shift
        device_list=$1
        ;;
    -h|--max-hdd-temp) shift
        max_hdd_temp=$1
        ;;
    -M|--method-list) shift
        case "$1" in
        rand|seq) method_list=$1 ;;
        *) i-fail "log: unknown method: $1" ;;
        esac
        ;;
    -m|--mode-list) shift
        case "$1" in
        read|write|readwrite|read,write) mode_list=$1 ;;
        *) i-fail "log: unknown mode: $1" ;;
        esac
        ;;
    -d|--io-depth) shift
        io_seq_depth=$1
        io_ran_depth=$1
        ;;
    -t|--overal-test-duration) shift
        opt_test_duration=$1
        ;;
    -n|--drives-num) shift
        ref_stor_drives_num=$1
        ;;
    -l|--max-latency) shift
        #ref_latency_rand_read_single=$1
        #ref_latency_rand_write_single=$1
        ref_latency_read_sys=$1
        ref_latency_write_sys=$1
        ref_latency_read_all=$1
        ref_latency_write_all=$1
        ;;
    -I|--min-iops) shift
        #ref_iops_rand_single=$1
        ref_iops_sys=$1
        ref_iops_all=$1
        ;;
    -b|--min-bandwidth) shift
        #ref_bandwidth_seq_single=$1
        ref_bandwidth_sys=$1
        ref_bandwidth_all=$1
        ;;
    -A|--all-drives)
        all_drives_flag=1
        ;;
    -Z|--zero-superblock)
        flush_storage_conf_flag=1
        ;;
    -T|--session-test-duration) shift
        session_test_duration=$1
        ;;
    -U|--create-udev-rules)
        create_udev_rules=1
        ;;
    --) shift
        break
        ;;
    *) i-fail "log: Unimplemented option chosen: $1"
        ;;
    esac
    shift
done

init_shred_udev_rules()
{
  # Without systemd envirounment it remains to use udev action wrapper hack...
  cat > "/bin/h-udev-wrapper" <<EOF
#!/bin/sh -e

export PATH=/sbin:/bin:/usr/bin:/usr/sbin
export HOME=/root
export SERVER=$SERVER
export MAC=$MAC

flock -n /dev/\$1 -c "/bin/h-drive-eraser \$1" &
EOF

  chmod +x /bin/h-udev-wrapper
  chmod +x /bin/h-drive-eraser

  cat > "/etc/udev/rules.d/86-drive-eraser.rules" <<'EOF'
ACTION=="add|change", KERNEL=="sd*[!0-9]", RUN+="/bin/h-udev-wrapper %k"
EOF
  
  # Disable blkid to remove thoughtfulness on ejecting drives
  sed -i '/blkid -o udev -p $tempnode/{s/^/#/p}' /lib/udev/rules.d/60-persistent-storage.rules
  udevadm control --reload-rules
}

[ -n "$opt_tests" ] || opt_tests=fio
[ -z "$opt_test_duration" ] || test_duration=$opt_test_duration
[ -z "$session_test_duration" ] || { stor_test_time=$session_test_duration; sys_test_time=$session_test_duration; }
opt_tests="$(printf "%s" "$opt_tests" | tr ',' ' ')"
mode_list="$(printf "%s" "$mode_list" | tr ',' ' ')"
method_list="$(printf "%s" "$method_list" | tr ',' ' ')"

if [ -n "$create_udev_rules" ]; then
  ! [ "$opt_tests" = 'shred' -o "$opt_tests" = 'badblocks' ] || init_shred_udev_rules
fi

rm -f /dev/das:* /dev/disk:* /dev/ses[0-9]
h-lsdev | while read src dst; do ln -sf "$src" "$dst"; done

mkdir -p $tmp_dir

expanders=$(ls /dev/ses* 2>/dev/null ||:)

if [ -n "$expanders" ]; then
  stor_drives="$(find /dev/das* | sed -n '/.*das:[0-9]:[0-9]*$/p' )"
  [ -n "$stor_drives" ] && stor_drives_num=$(echo "$stor_drives" | wc -l)
fi

sys_drives="$(find /dev/disk:* | grep -v 'p[0-9]*')"
[ -n "$sys_drives" ] && sys_drives_num=$(echo "$sys_drives" | wc -l)
[ -n "$expanders" -a -z "$stor_drives" ] && echo "log: Warning. Disks expander(s) found but no drives in storage"

[ ! -n "$stor_drives" -a ! -n "$sys_drives" ] && { i-log setup "log: WARNING! No drives found at all. Exiting..."; ; }

if [ -n "$all_drives_flag" ]; then
  test_drives_list="$(printf "%s\n%s" "$sys_drives" "$stor_drives")"
else
  test_drives_list="$stor_drives"
fi
[ -n "$all_drives_flag" ] && test_drives_list_num="$((stor_drives_num+sys_drives_num))" || test_drives_list_num="$stor_drives_num"


flush_storage_configuration()
{
  mdadm -S $(ls /dev/md* 2>/dev/null) 2>/dev/null ||:
  for D in $test_drives_list; do  
    mdadm --zero-superblock $D 2>/dev/null || :
  done
}

light_down_slots()
{
for e in $expanders; do
  for i in $(seq 1 "$(sg_ses -p 0xA "$e" | grep -c 'Element index')"); do  
        sg_ses --index="$i" --set=2:1=0 "$e" 2>/dev/null ||:
        sg_ses --index="$i" --set=3:5=0 "$e" 2>/dev/null ||:
  done
done
}

get_slot()
{
for e in $expanders; do
  sas_addr=$(lsscsi -tg | grep -w "$(readlink "$1")" | sed -n 's/.*sas:\(0x[0-9a-f]*\) .*/\1/p')
  slot=$(sg_ses -p 0xA "$e" | grep "$sas_addr" -B 8 | sed -n 's/.*Element index: \([0-9]\)/\1/p')
  if [ "$(echo "$slot" | wc -w)" -eq 1 ]; then 
    printf "slot=%s; expander=%s" "$slot" "$e"
    break
  fi  
done
}

[ -z "$flush_storage_conf_flag" ] || flush_storage_configuration

[ -z "$expanders" ] || light_down_slots

check_drive_type()
{
  if [ "$(cat /sys/block/"$1"/queue/rotational 2>/dev/null||:)" -eq 1 ]; then
    printf "drive_type=sata-hdd"
  else
    printf "drive_type=ssd"
  fi
}

log_check()
{
  touch $bad_drives_list

  tail -f -n 0 /var/log/messages | while read month day time process message; do
    if grep -qE "(mptsas.*delete device|mpt2sas.*log_info\(0x[0-9A-F]*\)|end_request: I/O error, dev sd|CDB:)" ; then
      err_drive=$(echo "$message" | sed -n 's/.*end_request: I\/O error, dev \(sd[a-z]*\),.*/\1/p')
      ! tag DEBUG? || echo "DEBUG: message: $message"
      ! tag DEBUG? || echo "DEBUG: found error ${err_drive:-empty}"
      #err_drive="$(echo $message | sed -n 's/.*end_request: I\/O error, dev \(sd[a-z]*\),.*/\1/p' | sort -u | tr '\n' ' ')"
      [ -n "$err_drive" ] || err_drive=$(echo "$message" | sed -n 's/.* \[\(sd[a-z]*\)\] CDB:.*/\1/p')
      ! tag DEBUG? || echo "DEBUG: SDB: found error ${err_drive:-empty}"
      [ -n "$err_drive" ] || err_drive_all="$(sed -n 's/.* \[\(sd[a-z]*\)\] CDB:.*/\1/p' /var/log/messages | sort -u)"
      ! tag DEBUG? || echo "DEBUG: SDB: grep errs in message log: ${err_drive_all:-empty}"
      #err_drive="$(echo $message | sed -n 's/.* \[\(sd[a-z]*\)\] CDB:.*/\1/p' | sort -u | tr '\n' ' ')"
      if [ -n "$expanders" ]; then
        phy_err="$(echo $message | sed -n 's,.*mpt2sas.*log_info(\(0x[0-9A-F]*\)).*code(\(0x[0-9A-F]*\)).*sub_code(\(0x[0-9A-F]*\)).*,\1\,\2\,\3,p')"
      fi

      for err_drive in ${err_drive:-$err_drive_all}; do
        if ! grep -q "$err_drive" "$bad_drives_list"; then
          ! tag DEBUG? || echo "DEBUG: drive ${err_drive:-empty} don't founded in $bad_drives_list"
          #[ -z "$err_drive" ] || echo "t-storage: I/O errors on $err_drive ($(for d in $err_drive; do smartctl -a /dev/$d | sed -n 's/Serial [Nn]umber: * \([0-0A-Z]*\)/\1/p'; printf "; "; get_slot /dev/$d; done))" 2>&1 | tee -a $logfile
          if [ -n "$err_drive" ]; then
            ! tag DEBUG? || echo "DEBUG: Added \"${err_drive:-empty}\" to $bad_drives_list"
            echo "$err_drive" >> $bad_drives_list
            #TODO Get S/N from cache and change get_slot to h-lsdev
            echo "t-storage: I/O errors on $err_drive (S/N:$(smartctl -a "/dev/$err_drive" | sed -n 's/Serial [Nn]umber: * \([0-0A-Z]*\)/\1/p'; err_slot=$(get_slot /dev/$err_drive); [ -z "$err_slot" ] || printf "; %s" "$err_slot"))"
            # Indicate the failed drive
            ledctl failure="/dev/$err_drive" 2>/dev/null ||:
            # Kill all load on failed drive
            lsof "/dev/$err_drive" | awk '/[0-9]/{print $2}' | xargs kill -9 2>/dev/null ||:
            # Offline and extract bad drive
            ! tag DEBUG? || echo "DEBUG: \"$bad_drives_list\" consist: \"$(cat "$bad_drives_list")\""
            echo offline > "/sys/block/$err_drive/device/state"
            echo 1 > "/sys/block/$err_drive/device/delete"
          fi
          #[ -z "$err_drive" -a -z "$phy_err" ] ||  echo "t-storage: Errors on physical layer of $err_drive; log_info,code,sub_code: $phy_err" 2>&1 | tee -a $logfile
        fi
      done

      if ! grep -q "$phy_err" "$sas_error_codes"; then
        echo "$phy_err" >> $sas_error_codes
        [ -z "$phy_err" ] ||  echo "t-storage: Errors on physical layer: log_info,code,sub_code: $phy_err" 2>&1 | tee -a $logfile
      fi
      else
        continue
      fi
  done
}

check_empty_slots()
{
  if [ -n "$expanders" ]; then 
    for e in $expanders; do
#TODO Prepare parameters and values to better usage in check_storage_drives_num
      empty_slots="$(sg_ses -p 0xA "$e" | grep 0x0000000000000000 -B 8 | sed -n 's/.*Element index: \([0-9]\)/\1/p' | tr '\n' ',' | sed 's/\,$//g')"
    done
    printf "%s" "$empty_slots"
  fi
}

check_storage_drives_num()
{
  if [ -n "$stor_drives_num" ]; then 
    [ "$stor_drives_num" -eq "$ref_stor_drives_num" ] || { 
      echo "log: Number of drives in storage is $stor_drives_num, that is not equal to $ref_stor_drives_num. $( [ -n "$(check_empty_slots)" ] || printf "Empty slots: %s" "$(check_empty_slots)")" | tee -a $logfile; }
  fi
}

send_results()
{
  RESULTS="&IOPS_${device}_${method}_${mode}=${IOPS}&latency_${device}_${method}_${mode}=${latency}&bandwidth_${device}_${method}_${mode}=${bandwidth}"
  curl "$API_URL?srv_id=$srv_id$RESULTS" || echo "Can't send current state to ya-hw-test!"
}

run_fio_job()
{
  fio "$conf_file"  > "$log_file" || { rc=$?;
    case $rc in
      128) echo "log: fio process was killed: $rc" ;;
      0) return $rc ;;
      *) echo "log: fio finished with rc=$rc" ;;
    esac
  }
  fio "$conf_file"  > "$log_file" || { rc=$?; i-fail  "log: Failed to start fio: $rc"; }
  ! [ "$rc" -eq 0 ] || check_fio_results "${dev_drive#/dev/}" "${log_file}" || rc=$?
}
                  
run_fio()
{
#if [ -n "$stor_drives" -a "$device_list" = "single" ]; then
#  mode_multiplier="$(printf "%s" "$mode_list" | wc -w)"
#  method_multiplier="$(printf "%s" "$method_list" | wc -w)"
#  [ -n "$test_duration" ] || test_duration=$(($stor_drives_num*$stor_test_time${mode_multiplier:+*$mode_multiplier}${method_multiplier:+*$method_multiplier} + $sys_drives_num*$sys_test_time${mode_multiplier:+*$mode_multiplier}${method_multiplier:+*$method_multiplier}))
#else
#  [ -n "$test_duration" ] || test_duration=$(($sys_drives_num*$sys_test_time${mode_multiplier:+*$mode_multiplier}${method_multiplier:+*$method_multiplier}))
#fi

echo "log: Expected duration of the test is $(h-readable-view time "${test_duration:-0}")"

  for device in $device_list; do
    for method in $method_list; do
      for mode in $mode_list; do
        
        #jpids=''
        mode_name="${method}${mode}"

        if [ "$method" = "rand" ]; then
          io_depth=$io_ran_depth
        else 
          io_depth=$io_seq_depth
          mode_name=$mode
        fi

#    if [ -n "$hard_raid" ]; then
#      sudo ./MegaCli64 -CfgClr -aAll
#      # RAID10:
#      for enc in $(MegaCli64 -PDList -aAll | sed -n 's/Enclosure Device ID: \([0-9]*\)/\1/p' | sort -u); do
#        n=0
#        array_devs=
#        for dev in `seq 1 2 $(($(MegaCli64 -PDList -aAll | grep -C 1 "Enclosure Device ID: $enc" | 
#          grep 'Slot Number' | cut -d ' ' -f 3 | wc -l)-1))`; do 
#            dev_pair=$((dev+1))
#            array_devs="${array_devs}Array$n[$enc:$dev,$enc:$dev_pair] "
#            n=$((n+1))
#        done
#      done
#      MegaCli64 -CfgSpanAdd $raid_level $array_devs -a0
#      MegaCli64 -LDInit -Start full -l0 -a0
#      MegaCli -LDInit ShowProg -l0 -a0
#    fi

        # Clear drives filenames which from config files for fio will be generated
        dev_filenames=''

        if echo "$device" | grep -qE '^raid'; then
          # Drives will be tested in raid mode
          # Generate variables and filenames
          dev_raid=/dev/md0
          raid_level="$(printf "%s" "$device" | sed -n 's/^[a-z]*\([0-9]*\)/\1/p')"
          conf_file="$tmp_dir/${method}_${mode}_${device}.conf"
          log_file="$tmp_dir/${method}_${mode}_${device}.log"

          # If overal number of all drives drivers in DAS greater than 24
          # then divide all drivers to groups by 20pcs per group and generate arrays for each group
          if [ "$stor_drives_num" -gt 24 ]; then
          drives_from=1
          [ -n "dev_raid_num" ] || dev_raid_num=20
          dev_raids=''
            for G in $(seq $((stor_drives_num/dev_raid_num))); do
              dev_raid="/dev/md$((G-1))"
              drives_to=$((G*dev_raid_num+1))
              drives_part=$(lsscsi -tg | grep sas | sed -n "$drives_from,$drives_to{s,.*\(/dev/sd[a-z]*\),\1,p}" | tr '\012' ' ')
              drives_from=$((drives_to+1));
              mdadm --create $dev_raid --level="$raid_level" --raid-devices="$dev_raid_num" "$drives_part"
              dev_raids="$([ ! -n "$dev_raids" ] || printf "%s " "$dev_raids")$dev_raid"
              dev_filenames=$(printf "%s" "${dev_filenames:+$dev_filenames\n }filename=$dev_raid")
            done
            # Wait for finish of building raids processes
            mdadm -W "$dev_raids"
          else
            # If overal number of all drives drivers in DAS lower than 24
            # generate only one raid
            dev_raids=$dev_raid
            mdadm --create $dev_raids --level="$raid_level" --raid-devices="$stor_drives_num" "$drives"
            mdadm -W $dev_raids
          fi
          dev_filenames="filename=$dev_raid"
        # Generate config file for fio when drives will be tested in raid mode
        cat > "$conf_file" <<EOF
[$mode/test]
filename=$(readlink $dev_raid)
rw=$mode_name
direct=$direct
buffered=$buffered
ioengine=$io_engine
iodepth=$io_depth
runtime=$session_test_duration
EOF

              # Run fio when drives will be tested in raid mode
              run_fio_job "$conf_file" "$log_file"

        else

          # Drives will be tested as a single block device
          dev_filenames=$(printf "%s" "$test_drives_list" | tr '\n' ' ')
            ! tag DEBUG? || echo "DEBUG: testing devices: $dev_filenames"

            dev_group_count=1

            # In case of random access method test 10 drives simultaneously
            if [ "$method" = "rand" ]; then
              dev_group_dim=$dev_group_dim_rand
            else 
            # In case of sequential access method test 4 drives simultaneously
              dev_group_dim=$dev_group_dim_seq
            fi
            
            # Calculate numbers of groups
            dev_group_num=$((test_drives_list_num/dev_group_dim))
            [ -z "$((test_drives_list_num-$((dev_group_num*dev_group_dim))))" ] || dev_group_num=$((dev_group_num+1))
            # If count of drives less than count of a group members then test this drives in a group anyway
            [ "$dev_group_num" -eq 0 ] && dev_group_num=1
            while [ "$dev_group_count" -le "$dev_group_num" ]; do
              # Prepare file that will store the pids of fio jobs for current testing group
              printf "" > $jpid_file
              # Generate drives list for current testing group 
              dev_group=$(printf "%s" "$dev_filenames" | cut -d ' ' -f $(($(($((dev_group_count-1))*dev_group_dim))+1))-$((dev_group_count*dev_group_dim)))
              ! tag DEBUG? || echo "DEBUG: dev_group=$dev_group"
              # For each drive in a current testing group generate config file and run fio job
              for dev_drive in $dev_group; do
                # From drives in DAS time of each operation less than for system drives
                if echo "$stor_drives" | grep -qF "$dev_drive"; then
                  operation_runtime=$stor_test_time
                else
                  operation_runtime=$sys_test_time
                fi
                # If overal-test-duration (parameter -t) is setted then calculate operation runtime for each drive
                [ -z "$overal_test_duration" ] || operation_runtime=$((session_test_duration/test_drives_list_num))
                # Generate filename for config and log files for each fio job
                conf_file="$tmp_dir/${method}_${mode}_${device}_${dev_drive#/dev/}.conf"
                log_file="$tmp_dir/${method}_${mode}_${device}_${dev_drive#/dev/}.log"
                cat > "$conf_file" <<EOF
[$mode/test]
filename=$(readlink "$dev_drive")
rw=$mode_name
direct=$direct
bs=$block_size
numjobs=1
buffered=$buffered
ioengine=$io_engine
iodepth=$io_depth
runtime=$operation_runtime
EOF
              
                  run_fio_job "$conf_file" "$log_file" &
                  jpid=$!
                  #jpids="${jpids:+$jpids }$jpid"
                  # Collect all fio jobs by current testing session in file
                  printf "%s " "$jpid" >> $jpid_file
                  
                done
                wait $(cat $jpid_file) || rc=$?

                dev_group_count=$((dev_group_count+1))
                ! tag DEBUG? || echo "DEBUG: Current group num: $dev_group_count"
            done
      fi
      done
    done


    [ -n "$non_first_cycle" ] && flush_storage_configuration

    non_first_cycle=1

  done

  kill -9 $(cat $ipid_file) $(cat $tpid_file) >/dev/null 2>&1 ||:
  return $rc
}

check_fio_results()
{
  #log_file="$2"
  eval $(h-blkinfo -d "/dev/$1")
 
  ! tag DEBUG? || echo "DEBUG: Analyzed the log file: $log_file"

  latency_read=''
  latency_write=''

  latency_raw=$(sed -n 's/.*clat (\([a-z]*\)).*avg=\([0-9]*.[0-9]*\),.*/\2\1/p' "$log_file")
  latency_value=$(printf "%s" "$latency_raw" | cut -d '.' -f 1)
  latency_unit=$(printf "%s" "$latency_raw" | tr -d '.[0-9]')

 case "$latency_unit" in
      usec) eval $(echo "latency_$mode=$latency_value") ;;
      msec) eval $(echo "latency_$mode=$((latency_value * 60))") ;;
      sec) eval $(echo "latency_$mode=$((latency_value * 3600))") ;;
  esac

  IOPS=$(sed -n 's/.*iops=\([0-9]*\).*/\1/p' "$log_file" | head -1)

  bandwidth_raw=$(sed -n 's/.*bw=\([0-9]*.*\)\/s, iops.*/\1/p' "$log_file" | head -1 )
  bandwidth_unit=$(printf "%s" "$bandwidth_raw" | tr -d "0-9.")
  bandwidth_value=$(printf "%s" "$bandwidth_raw" | tr -d "GMKB" | cut -d '.' -f 1)
    case "$bandwidth_unit" in
        B) bandwidth="$bandwidth_value" ;;
        KB) bandwidth="$((bandwidth_value * 1024))" ;;
        MB) bandwidth="$((bandwidth_value * 1048576))" ;;
        GB) bandwidth="$((bandwidth_value * 1073741824))" ;;
    esac
  
    #  echo "$conf_file: IOPS=$IOPS, ${latency_raw_read:+latency(read)=${latency_raw_read}, }${latency_raw_write:+latency(write)=$latency_raw_write, }bandwidth=$bandwidth_raw/s"
    echo "log: $(! tag DEBUG? || printf "$conf_file") $1 (S/N:$serial): IOPS=$IOPS, ${latency_read:+latency(read)=${latency_raw}, }${latency_write:+latency(write)=$latency_raw, }bandwidth=$bandwidth_raw/s"

    if [ -n "$stor_drives" ]; then
      ref_iops=$ref_iops_all
      ref_latency_read=$ref_latency_read_all
      ref_latency_write=$ref_latency_write_all
      ref_bandwidth=$ref_bandwidth_all
    else
      ref_iops=$ref_iops_sys
      ref_latency_read=$ref_latency_read_sys
      ref_latency_write=$ref_latency_write_sys
      ref_bandwidth=$ref_bandwidth_sys
    fi

    [ "${IOPS:-0}" -lt "$ref_iops" ] && {
      rc=2; echo "log: $(! tag DEBUG? || printf "$conf_file") $1 (S/N:$serial; get_slot "/dev/$1"): Low IOPS on drive operations: $IOPS!" 2>&1 | tee -a $logfile
    }

    ! echo "$log_file" | grep -q seq && [ -n "$latency_read" ] && {
      [ "$latency_read" -gt "$ref_latency_read" ] && {
        rc=3; echo "log: $(! tag DEBUG? || printf "$conf_file") $1 (S/N:$serial; get_slot "/dev/$1"): Latency(read) is too high: $latency_raw_read!" 2>&1 | tee -a $logfile
      }
    }

    ! echo "$log_file" | grep -q seq && [ -n "$latency_write" ] && {
      [ "$latency_write" -gt "$ref_latency_write" ] && {
        rc=3; echo "log: $(! tag DEBUG? || printf "$conf_file") $1 (S/N:$serial; get_slot "/dev/$1"): Latency(write) is too high: $latency_raw_write!" 2>&1 | tee -a $logfile

      }
    }

    [ "${bandwidth:-0}" -lt "$ref_bandwidth" ] && {
      rc=4; echo "log: $(! tag DEBUG? || printf "$conf_file") $1 (S/N:$serial; get_slot "/dev/$1"): The I/O bandwidth is too low: $bandwidth!" 2>&1 | tee -a $logfile
    }
  return $rc
}

run_load()
{
  rc=0
  for d in $test_drives_list; do
    h-drive-eraser "${d#/dev/}" "$1" &
    bpid=$!
    printf "%s " "$bpid" >> $fpid_file
  done

  if [ -n "$opt_test_duration" ]; then
    sleep $((opt_test_duration+5))
  else
    wait $(cat $fpid_file) || rc=$?
  fi
    
  kill -9 $(cat $ipid_file) $(cat $tpid_file) $(cat $fpid_file) >/dev/null 2>&1 ||:
  return $rc 
}


hdd_temp_measurement()
{
  cur_hdd_temp=$(timeout -s 9 10 smartctl -a $1 | grep -E 'Temperature_Celsius' | awk '{print $10}');
  if [ "${cur_hdd_temp:-0}" -ge "$warn_hdd_temp" ]; then
    echo "$1(S/N:$(smartctl -a "$1" | sed -ne 's/^Serial Number: *\(.*\)/\1/p'), $(get_slot "$1") ) temperature is high: $cur_hdd_temp°C"
  fi
  if [ "${cur_hdd_temp:-0}" -ge "$max_hdd_temp" ]; then
    kill -9  $(cat $ipid_file) $(cat $fpid_file) >/dev/null 2>&1 || rc=$?
    echo "$1(S/N:$(smartctl -a "$1" | sed -ne 's/^Serial Number: *\(.*\)/\1/p'), $(get_slot "$1") ) temperature is CRITICAL: $cur_hdd_temp°C"
    exit $rc
  fi
}

hdd_temp_check()
{
  while :; do
    for dev_drive in $test_drives_list; do
      hdd_temp_measurement "$dev_drive" &
      printf "%s" "$([ ! -s "$tpid_file" ] || printf " ")$?" >> tpid_file 
    done
    sleep 5
  done
}


#[ -n "$expanders" ] && check_storage_drives_num

log_check &
ipid=$!
printf "%s" "$ipid" > $ipid_file

hdd_temp_check &
tpid=$!
printf "%s" "$tpid" > $tpid_file

for test in $opt_tests; do
  rc=0
  echo "$test" > /var/run/current-load
  echo "log: Starting ${test}..."
  case $test in
    fio)
      run_fio &
      fpid=$!
      printf "%s " "$fpid" > $fpid_file
    ;;
    badblocks)
      run_load badblocks &
      fpid=$!
      printf "%s " "$fpid" > $fpid_file
    ;;
    shred)
      run_load shred &
      fpid=$!
      printf "%s " "$fpid" > $fpid_file
    ;;
  esac

done

wait $(cat "$fpid_file") ||:

[ ! -s "$logfile"  -a ! -s "$bad_drives_list" ] || 
  echo "log: FAILED! $(cut -d ' ' -f 3- "$logfile" | uniq | tr '\n' '; '; 
    [ ! -s "$bad_drives_list" ] || { printf "drive(s): "; while read dev; do
      eval `h-blkinfo -d "/dev/$dev"`
      printf "$serial, "
    done < "$bad_drives_list" | sed 's/, $//'; printf " has errors I/O errors"; } )"


# vim: set expandtab: tabstop=2:
