#!/bin/sh -e
VERSION=0.6

[ -n "$SERVER" -a -n "$MAC" ]

cd /
cat t:mem | lzma -c -d | cpio -iumd
cat perl | lzma -c -d | cpio -iumd

modprobe msr ||:
modprobe sb_edac

SAVED_TRAPS="$(trap)"

load_sigstop()
{
    rc="$?"

    [ -z "$LPID" ] || kill -9 "$LPID" 2>/dev/null ||:
    [ -z "$TPID" ] || kill -9 "$TPID" 2>/dev/null ||:
    [ -z "$EPID" ] || kill -9 "$EPID" 2>/dev/null ||:

    killall -9 xlinpack_xeon64 2>/dev/null ||:
    killall -9 stressapptest 2>/dev/null ||:
    killall -9 ptumon 2>/dev/null ||:
    killall -9 ptugen 2>/dev/null ||:
    killall -9 tail 2>/dev/null ||:

		kill -9 $(cat $lpid_file) $(cat $tpid_file) $(cat $epid_file) 2>/dev/null ||:
    rm -f $lpid_file $tpid_file $epid_file $fifo_file /var/run/current-load /tmp/skip_err_flag ||:

    eval "$SAVED_TRAPS"

    [ "$rc" = "0" ] || false
    set +e
    set +x
}

trap load_sigstop USR1 KILL TERM EXIT QUIT INT

logfile=/var/log/t\:load$$.log

lpid_file=/var/run/load.pid
tpid_file=/var/run/temp-check.pid
epid_file=/var/run/dmesg-check.pid

config_file=/tmp/xlinpack.$$.config
fifo_file=/tmp/xlinpack.$$.pipe
skip_checks=/tmp/skip_checks.cnt

TEMP=`getopt -o a:p:g:m:n:s:S:t:w:fd --long apply-test:,test-params:,max-temp:,num-of-tests:,gflops:,matrix-size:,skip-errors:,test-duration:,wait-time:,allow-throttling,debug-mode -- "$@" || echo  "t:load: wrong parameters"`

eval set -- "$TEMP"

opt_tests=
opt_gflops=0
opt_wait_time=300
opt_maxtemp=85
opt_num_of_tests=1
opt_test_duration=3600

while :; do
    case "$1" in
    -a|--apply-test) shift
        case "$1" in
        linpack|stressapptest|ptugen) opt_tests="${opt_tests:+$opt_tests,}$1" ;;
        *) echo  "t:load: unknown test: $1" ;;
        esac
        ;;
    -p|--test-params) shift
        opt_test_params="$1"
        ;;
    -m|--max-temp) shift
        opt_maxtemp="$1"
        ;;
    -n|--num-of-tests) shift
        opt_num_of_tests="$1"
        ;;
    -s|--matrix-size) shift
        opt_matrix_size="$1"
        ;;
    -S|--skip-errors) shift
        opt_skip_errors="$1"
        ;;
    -g|--gflops) shift
        opt_gflops="$1"
        ;;
    -t|--test-duration) shift
        opt_test_duration="$1"
        units="$(printf "$1"|sed -ne 's/[0-9]*\([smh]\)/\1/p')"
        value="$(printf "$1"|sed -ne 's/\([0-9]*\)[smh]/\1/p')"
        case "$units" in
            s) opt_test_duration="$value" ;;
            m) opt_test_duration="$((value * 60))" ;;
            h) opt_test_duration="$((value * 3600))" ;;
        esac
        ;;
    -w|--wait-time) shift
        opt_wait_time="$1"
        ;;
    -f|--allow-throttling)
        opt_allow_throttling=1
        ;;
    -d|--debug-mode)
        opt_debug=1
        ;;
    --) shift
        break
        ;;
    *) echo  "t:load: wrong option: $1"
        ;;
    esac
    shift
done

[ -n "$opt_tests" ] || opt_tests=linpack
opt_tests="$(echo $opt_tests | tr ',' ' ')"

linpack_check()
{
# TODO Determine Performance flag
#tag list | grep performance
tail -f "$fifo_file" | while read line; do
	# TODO Do more strict GFLOPS matching
	#gflops=$(printf "$line" | sed 's/ *[0-9]*   [0-9]*   [0-9] * \([0-9]*.[0-9]*\) *.*/\1/p')
	gflops=$(printf "$line" | grep "$opt_matrix_size" | cut -d' ' -f14)
	[ -z "$gflops" ] || { tag +performance_${flops}_GFLOPS; echo "t:load: Measured performance is $gflops GFLOPS"; return 0; }
done
}

load_start()
{
    rc=0
    for test in $opt_tests; do
        rc=0
        echo $test > /var/run/current-load
        case $test in
        linpack)
            timeout -k 5 $((opt_test_duration+30)) xlinpack_xeon64 "$config_file" 1>$fifo_file 2>&1 &
            pid=$!
            linpack_check &
            #pid="$pid $!"
            printf " $!" >> $lpid_file
						i-log log "t:load: $test test started"
            #echo $pid > /var/run/load-linpack.pid
            printf " $pid" >> $lpid_file
            ;;
        stressapptest)
						[ -n $opt_test_params ] && opt_test_params='-A -v 10'
            timeout -k 10 $((opt_test_duration+30)) stressapptest $opt_test_params -s $opt_test_duration &
            pid=$!
            #echo $pid > /var/run/load-stresapptest.pid
            printf " $pid" >> $lpid_file
            ;;
        ptugen)
            touch /root/.accepted_intel_ptu_license
						[ -n $opt_test_params ] && opt_test_params='-ct 4 -mt 3'
            timeout -k 5 $((opt_test_duration+5)) ptugen -t $opt_test_duration $opt_test_params -l y &
            pid=$!
            #echo $pid > /var/run/load-ptugen.pid
            printf " $pid" >> $lpid_file
            ;;
        esac
	
        wait $pid || rc=$?
        #rm -f /var/run/load-* ||:
				i-log log "t:load: $test test ended"
        # RC: 124 for timeout and 137 for stressapptest pass
        [ "$rc" -ne 137 ] || i-log log "t:load: $test RC is 137"
        if [ "$rc" -ne 0 -a "$rc" -ne 124 -a "$rc" -ne 137 ]; then
						if [ "$rc" -eq 255 ]; then
							echo "t:load: Not enought memory to run $test (rc:$rc)" >> $logfile
						fi
            echo "$test ended with $rc" >> $logfile
            break
        fi
    done

		i-log log "t:load: killing subprocesses..."
    kill -9 $(cat $tpid_file 2>/dev/null) \
            $(cat $epid_file 2>/dev/null) 2>/dev/null ||:
    exit $rc
}

cpu_temp_check()
{
	tag -CPU_overheated
    while :; do
        ipmitool sensor | awk -vtemp="$opt_maxtemp" -vlogf="$logfile" -vFS=\| '
    function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
    function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
    function trim(s) { return rtrim(ltrim(s)); }
    tolower(trim($1)) ~ /(.*cpu[0-9]+.*temp|temp.*cpu[0-9]|^cpu[0-9]+).*/ {
        if (trim($3) !~ /degrees C/) next
        v=$2
        if (v ~ /na/) next
        if (v !~ /^[[:space:]]*[[:digit:]]+\.[[:digit:]]+[[:space:]]*$/) { print "Wrong sensor value:", v >> logf; exit 2 }
        v=int(v)
        if (v >= temp) { print $1, "is HIGH:", v >> logf; exit 1 }
    }' || { rc=$?; [ -z "$opt_allow_throttling" ] || {
							sleep 10
							if ! tag CPU_overheated?; then 
								tag +CPU_overheated
								i-log setup "CPU temp is HIGH!"
							fi
							rc=0
							continue
						}
						kill -9 $(cat $lpid_file 2>/dev/null) \
										$(cat $epid_file 2>/dev/null) 2>/dev/null ||:
						exit $rc
					}
        sleep 1
    done
}


log_check()
{
	if printf "$1" | grep -q "GHES.*disabled"; then
			if ! tag GHES_disabled?; then
				tag +GHES_disabled
				#sed -i '/GHES.*disabled/d' $message
				echo "Warning: GHES disabled">> $logfile
			fi
			return 0
	elif printf "$1" | grep -qE "EDAC.*error"; then
			i-log log "t:load: EDAC error catched"
			if [ -n "$failure_dimms" ]; then
				failure_dimm="$(edac-util | grep -E -v "$failure_dimms" | sed -ne 's/.*:.*:[ ]\(.*\):.*/\1/p;s/\n/,/;')"
			else
				failure_dimm="$(edac-util | sed -ne 's/.*:.*:[ ]\(.*\):.*/\1/p;s/\n/,/;')"
			fi
				
			failure_dimms="$([ -n $failure_dimm ] && printf "${failure_dimms:+|}$failure_dimm")"
			echo "Found errors in module(s): $failure_dimms" >> $logfile
			sleep $opt_wait_time
			break
	elif printf "$1" | grep -iF "Hardware Error"; then
			# TODO Parse mcelog output for errors and egrep with system log messages	\
			i-log log "t:load: HW errors handler triggered"
			# TODO Count times of triggering HW errors handler
			
			[ -z "$opt_skip_errors" ] || {
			i-log log "t:load: Skip HW Errors option is enabled"
				[ -z "$(printf "$1" | grep -F "$2")" ] || {
					touch /tmp/skip_err_flag && i-log log "t:load: start skipping HW errors from message: $2"
					#touch /tmp/skip_err_flag && i-log log "t:load: Skipping HW Errors from message: $(printf "$2" | grep -v '^[[:space:]]*$')"
					tag +HW_errs_skipped
				}
				[ -z "$(printf "$1" | grep -F "$3")" ] || {
					rm /tmp/skip_err_flag && i-log log "t:load: stop skipping HW errors due to recieved message: $3"
					#rm /tmp/skip_err_flag && i-log log "t:load: Stop skipping HW Errors due to recieved message: $(printf "$3" | grep -v '^[[:space:]]*$')"
					tag -HW_errs_skipped
					return 0
				}
				[ -e /tmp/skip_err_flag ] && { i-log log "t:load: Skip HW Error: $(printf "$1" | grep -v '^[[:space:]]*$')"; return 0; }
			}

			[ -z "$opt_allow_throttling" ] || return 0

			cat /var/log/messages | grep -F "$3" -B 10  >> $logfile

	elif printf "$1" | grep -qF throttled; then
			warn_message="CPU has been throttled"
			if [ -n "$opt_allow_throttling" ]; then
				if ! tag CPU_throttled?; then
					echo "Warning: $warn_message" >> $logfile
					tag +CPU_throttled
#								echo "CPU is throttled"
				fi
				return 0
			fi
	elif $(printf "$1" | grep -qF "perf samples too long"); then
			nmi_cpu_time=$(printf $1 | sed -n 's/.*perf samples too long (\([0-9]*\) .*/\1/p' | tr -d '\n')
			echo "Warning: NMI handler takes too much CPU time${nmi_cpu_time:+ $nmi_cpu_time ns}" >> $logfile
			nmi_counter=$((nmi_counter+1))
			if [ "$nmi_counter" -gt 2 ]; then
				if ! tag NMI_hangs?; then 
					tag +NMI_hangs
				fi
				export opt_test_duration=$((opt_test_duration+14400)); 
				i-log log "t:load: [$(cat /var/run/current-load)] Hardware failure detected. \
						Test duration increased by 4 hours.";
			fi
	 return 0
	else
	 return 0
	fi

	kill -9 $(cat $epid_file 2>/dev/null) \
						$(cat $lpid_file 2>/dev/null) \
            $(cat $tpid_file 2>/dev/null) 2>/dev/null ||:
	return 1
}


log_catcher()
{
		tag -CPU_throttled
		tag -GHES_disabled
		tag -NMI_hangs
		tag -HW_errs_skipped
		
		failure_dimms=
		nmi_counter=
		#sed -i '$d' /bin/i\-status
		[ -z "$opt_skip_errors" ] || {
			skip_err_from=$(printf "$opt_skip_errors" | cut -d '?' -f 1)
			skip_err_to=$(printf "$opt_skip_errors" | cut -d '?' -f 2)
		}

    tail -f -n 0 /var/log/messages | while read month day time process message; do
			log_check "$message" "$skip_err_from" "$skip_err_to" "$month $day $time $process" &
			printf " $!" >> $epid_file
		#TODO clean $(sed) old log_checks every 10 sec from $epid_file
    done
}

cpumodel=$(fgrep model\ name /proc/cpuinfo |head -1|cut -f 2 -d ':')
case "$cpumodel" in
*E5-2660*)
    opt_gflops=240
    ;;
*E5-2690*)
    opt_gflops=240
    ;;
*E5-2667*)
    opt_gflops=240
    ;;
*)
    ;;
esac

! edac-ctl --register-labels 2>&1 | fgrep -q "No dimm" ||
    i-log log 't:load: Warning! A possibility to find a slot with defective DIMM is not supported for this MB.'

cpunumber=$(cat /proc/cpuinfo | grep "physical id" | sort -u | wc -l)
coresnumber=$(cat /proc/cpuinfo | grep "^cpu cores"| head -1 |cut -d ':' -f 2|tr -d ' ')

export granularity=KMP_AFFINITY=fine,scatter
export OMP_NUM_THREADS="$((cpunumber*coresnumber))"
export OMP_DYNAMIC=false
#TODO: compile awk with math support and then eliminate the perl chunk
#[ -n "$opt_matrix_size" ] || opt_matrix_size="$(grep -w MemTotal: /proc/meminfo|awk -vsz=0 '{ print int(sqrt(( $2 - 524288 ) * 0.90 * 1024 / 8 )) }')"
[ -n "$opt_matrix_size" ] || opt_matrix_size="$(perl -ne 's/^MemTotal: *(\d+)// && print int(sqrt( ($1 - 524288 ) * 0.9 * 1024 / 8 )) ' /proc/meminfo)"

cat <<EOF> $config_file
Sample Intel(R) Optimized LINPACK Benchmark data file (lininput_xeon64)
Intel(R) Optimized LINPACK Benchmark data
1 # number of tests
$opt_matrix_size # problem sizes
$opt_matrix_size # leading dimensions
$opt_num_of_tests # times to run a test
4 # alignment values (in KBytes)
EOF

rm -f $fifo_file $logfile
mkfifo $fifo_file

i-log log "t:load: VERSION $VERSION"

_start="$(date +%s)"

stage_attempt="$(i-get einstellung/show_stages | sed -n 's/.* *\([0-9]\) *t:load.*/\1/p' | tail -1)"
[ "$stage_attempt" -gt 1 ] && { 
	echo  "t:load: Server reboots during last workload!"
}

load_start &
LPID=$!
printf $LPID > $lpid_file

cpu_temp_check &
TPID=$!
printf $TPID > $tpid_file

log_catcher &
EPID=$!
printf $EPID > $epid_file

wait "$LPID" "$TPID" "$EPID" ||:

i-log log "`mcelog`" ||:
i-log log "`mcelog --dmi`" ||:

[ ! -s "$logfile" ] || { warn_messages=$(cat $logfile | sort -u | sed -n 's/^Warning: //p'); 
	[ -n "$warn_messages" ] && { i-log log "Warnings: $warn_messages; $(grep -E '^Warning' $logfile | wc -l) entries total."; 
		sed -in '/^Warning: /d' $logfile; };
}

[ ! -s "$logfile" ] || echo "t:load: FAILED! $(cat $logfile | uniq | grep -vE '^Warning')"

_finish="$(date +%s)"
duration="$(((_finish-_start)/60))"

exit
